<?php

namespace App\Domain\Financeiro\Contabilidade\Models;

use ECidade\Financeiro\Contabilidade\PlanoDeContas\Estrutural;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;

/**
 * Class ConplanoOrcamento
 * @package App\Domain\Financeiro\Contabilidade\Models
 * @property $c60_codcon
 * @property $c60_anousu
 * @property $c60_estrut
 * @property $c60_descr
 * @property $c60_finali
 * @property $c60_codsis
 * @property $c60_codcla
 * @property $c60_consistemaconta
 * @property $c60_identificadorfinanceiro
 * @property $c60_naturezasaldo
 * @property $c60_funcao
 * @property $c60_identificadoresultadoprimario
 * @property $c60_codigo
 *
 * @method ConplanoOrcamento contaVinculadaReceita(integer $id)
 * @method Conplano apenasAnaliticas()
 * @method Conplano apenasReceita()
 * @method Conplano apenasDespesa()
 */
class ConplanoOrcamento extends Model
{
    protected $table = 'contabilidade.conplanoorcamento';
    protected $primaryKey = 'c60_codigo';
    public $timestamps = false;

    private $storage = [];

    public function toArray()
    {
        $data = parent::toArray(); // TODO: Change the autogenerated stub
        $estrutural = new Estrutural($this->c60_estrut);
        $data['mascara'] = $estrutural->getEstruturalComMascara();
        return $data;
    }

    /**
     * @return ConplanoOrcamentoAnalitica
     */
    public function getReduzido()
    {
        if (!array_key_exists('reduzido', $this->storage)) {
            $this->storage['reduzido'] = ConplanoOrcamentoAnalitica::where('c61_codcon', '=', $this->c60_codcon)
                ->where('c61_anousu', '=', $this->c60_anousu)
                ->first();
        }

        return $this->storage['reduzido'];
    }

    /**
     * Valida se a conta do e-cidade esta vinculada a conta do governo pelo id da conta no sistema
     * @param Builder $query
     * @param integer $id
     * @return Builder
     */
    public function scopeContaVinculadaReceita(Builder $query, $id)
    {
        return $query->whereRaw("exists(
            select 1 from contabilidade.planoreceitaconplanoorcamento
             where conplanoorcamento_codigo = c60_codigo
               and planoreceita_id = {$id}
        )");
    }

    /**
     * Valida se o número informado já esta cadastrado
     * @param Builder $query
     * @return Builder
     */
    public function scopeApenasAnaliticas(Builder $query)
    {
        return $query->whereRaw('exists(
            select 1 from contabilidade.conplanoorcamentoanalitica
            where c61_codcon = c60_codcon and c61_anousu = c60_anousu
        )');
    }

    public function scopeApenasReceita(Builder $query)
    {
        return $query->whereRaw('(substring(c60_estrut, 1, 1)::int = 4 or substring(c60_estrut, 1, 1)::int = 9)');
    }

    public function scopeApenasDespesa(Builder $query)
    {
        return $query->whereRaw('substring(c60_estrut, 1, 1)::int = 3');
    }

    /**
     * Monta uma string sql para buscar as contas da despesa a partir dos elementos que podem gerar dotação conforme
     * regra já aplicada no cadastro das dotações
     * @param int $exercicio Exercício que será filtrado as contas
     * @param array $condicoes Array de condições a ser aplicada no where
     * @return string
     */
    public static function sqlTodasContasApartirDoElemento($exercicio, $condicoes = [])
    {
        $where = "";
        if (!empty($condicoes)) {
            $where = " where " . implode(' and ', $condicoes);
        }

        return "
        with recursive contas AS (
           select elemento.*,
                  substring(elemento.c60_estrut, 1, 7) as ate
             from conplanoorcamento as elemento
             join orcelemento on orcelemento.o56_codele = elemento.c60_codcon
                  and orcelemento.o56_anousu = elemento.c60_anousu
            where elemento.c60_anousu = {$exercicio}
              and fc_nivel_plano2005(c60_estrut) = 6
         union

           select outros.*,
                  substring(outros.c60_estrut, 1, 7) as ate
             from conplanoorcamento as outros
             join contas on contas.c60_anousu = outros.c60_anousu
                  and outros.c60_estrut like contas.ate || '%'
        ) select * from contas {$where} order by c60_estrut;
        ";
    }

    /**
     * @param int $exercicio
     * @param array $condicoes de condições a ser aplicada no where
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public static function contasDespesaAPartirElemento($exercicio, $condicoes = [])
    {
        $sql = self::sqlTodasContasApartirDoElemento($exercicio, $condicoes);
        return ConplanoOrcamento::hydrate(DB::select($sql));
    }

    public function planoUniaoReceita()
    {
        return $this->belongsToMany(
            PlanoReceita::class,
            'contabilidade.planoreceitaconplanoorcamento',
            'conplanoorcamento_codigo',
            'planoreceita_id'
        )->where('uniao', true);
    }

    public function planoEstadualReceita()
    {
        return $this->belongsToMany(
            PlanoReceita::class,
            'contabilidade.planoreceitaconplanoorcamento',
            'conplanoorcamento_codigo',
            'planoreceita_id'
        )->where('uniao', false);
    }

    public function planoUniaoDespesa()
    {
        return $this->belongsToMany(
            PlanoDespesa::class,
            'contabilidade.planodespesaconplanoorcamento',
            'conplanoorcamento_codigo',
            'planodespesa_id'
        )->where('uniao', true);
    }

    public function planoEstadualDespesa()
    {
        return $this->belongsToMany(
            PlanoDespesa::class,
            'contabilidade.planodespesaconplanoorcamento',
            'conplanoorcamento_codigo',
            'planodespesa_id'
        )->where('uniao', false);
    }
}
