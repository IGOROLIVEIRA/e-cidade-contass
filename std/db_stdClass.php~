<?
require_once("libs/db_utils.php");
 class db_stdClass {
   
   /**
    * Retorna os dados da instituicao. caso nao seje informado a instituição sera
    * retornado a instituicao da sessao
    *
    * @param integer $iInstit Código da instituicao;
    * @return object
    */
   function getDadosInstit($iInstit = null) {
     
      if (empty($iInstit)) {
        $iInstit = db_getsession("DB_instit");
      }
      
      $sSqlInstit  = "select *,z01_nome, z01_cgccpf";
      $sSqlInstit .= "  from db_config ";
      $sSqlInstit .= "  inner join cgm on z01_numcgm = numcgm";
      $sSqlInstit .= " where codigo = {$iInstit}";
      $rsInstit    = db_query($sSqlInstit);
      return db_utils::fieldsMemory($rsInstit, 0);
   }
   
   /**
    * Retorna os parametros configurados para a tabela de configuracao especificada.
    *
    * @param string $sClassParametro nome da classe de parametro
    * @param array $aKeys  parametros chaves da classe (metodo sql_query_file)
    * @param string $sFields lista de campos
    * @return object db_utils
    */
   function getParametro($sClassParametro, $aKeys = null, $sFields = "*") {
     
     if (empty($sFields)) {
       $sFields = "*";                              
     }
     $oRetorno       = array();
     $oClass         = db_utils::getDao($sClassParametro);
     $oReflectMethod = new ReflectionMethod ("cl_{$sClassParametro}::sql_query_file");
     $i = 0;
     foreach ($oReflectMethod->getParameters() as $i => $param) {

       $svar   = $param->getName();
       if (!$param->isOptional() || isset($aKeys[$i])) {
         $aParam[] = $aKeys[$i];
       } else if ($param->getName() == "campos" ){
         $aParam[] = $sFields;
       } else {
         $aParam[] = null;
       }
       $i++;
     }
     $sRetornoSql  = call_user_func_array(array(&$oClass,"sql_query_file"), $aParam);
     $rsRetornoSql = call_user_func_array(array(&$oClass,"sql_record"), array($sRetornoSql));
     $iNumRows     = $oClass->numrows;
     $oRetorno     = db_utils::getColectionByRecord($rsRetornoSql);
     //print_r($oRetorno);
     return $oRetorno;
   }
   
   
   /**
    * Retorna a data final sendo ele um dia util
    *
    * @param date    $dtDataIni
    * @param integer $iNroDias
    * @return date
    */
   function getIntervaloDiasUteis($dtDataIni="",$iNroDias=0){
   	
     $iDias     = $iNroDias;
     $iSomaDia  = 1;
     $lFeriado  = true;
     $dtDataFim = $dtDataIni;

     $oCalend = db_utils::getDao('calend');
     
     while ( $lFeriado ) {
       $rsConsultaFeriado = $oCalend->sql_record($oCalend->sql_query_file(date('Y-m-d',$dtDataFim)));
       if ( $oCalend->numrows > 0 ) {
         $dtDataFim = strtotime("+1 day",$dtDataFim);
         ++$iDias;
       } else {
         if ($iSomaDia >= $iDias) {
           $lFeriado = false;
         } else {
           $dtDataFim  = strtotime("+1 day",$dtDataFim);  
         }
      }
      ++$iSomaDia;
    }       	
   	  
   	return $dtDataFim;
  }
  
  /**
   * Troca algumas tags especiais pelo seu caractere correspondente
   *
   * @param string $sString string
   * @return string
   */
  function db_stripTagsJson($sString) {
    
    $aReferences = array(
                         "<arroba>",
                         "<quebralinha>",
                         "<aspa>"
                        );
   $aMappTo      = array("@",
                         "\\n",
                         "\""  
                        );                    
   $sString = str_replace($aReferences, $aMappTo, $sString);
   return $sString;
                        
  }
}   
   


?>